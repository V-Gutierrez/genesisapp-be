// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_BROWN_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String              @id @default(cuid())
  name              String
  password          String
  birthdate         DateTime
  email             String              @unique
  phone             String              @unique
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  UserRefreshTokens UserRefreshTokens[]
  active            Boolean             @default(false)
  Subscriptions     Subscription[]
}

model UserRefreshTokens {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  owner     User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model GrowthGroup {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lat           Float
  lng           Float
  name          String
  whatsappLink  String
  addressInfo   String
  weekDay       String
  scheduledTime String
  leadership    String[] //Relate to users in a distant future (leaders need to have an account)
}

model Devotional {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  scheduledTo    DateTime @default(now())
  title          String
  body           String //Probably markdown or HTML in the future
  slug           String //auto-generated by backend
  author         String
  coverImage     String   @default("coverImage")
  coverThumbnail String   @default("coverImageThumbnail")
  assetId        String   @default("none")
}

model Subscription {
  id          String  @id @default(uuid())
  title       String
  eventId     String?
  userId      String
  participant User    @relation(fields: [userId], references: [id])
  Event       Event?  @relation(fields: [eventId], references: [id])
}

model Event {
  id               String         @id @default(uuid())
  title            String
  description      String
  scheduledTo      DateTime       @default(now())
  createdAt        DateTime       @default(now())
  lat              Float
  lng              Float
  addressInfo      String
  maxSubscriptions Int
  subscriptions    Subscription[]
}
