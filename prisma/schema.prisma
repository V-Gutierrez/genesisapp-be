// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_BROWN_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String              @id @default(cuid())
  name              String
  password          String
  birthdate         DateTime
  email             String              @unique
  phone             String              @unique
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  UserRefreshTokens UserRefreshTokens[]
  active            Boolean             @default(false)
  DevotionalLikes   DevotionalLikes[]
  DevotionalViews   DevotionalViews[]
  NewsLikes         NewsLikes[]
  NewsViews         NewsViews[]
}

model UserRefreshTokens {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  owner     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

model GrowthGroup {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lat           Float
  lng           Float
  name          String
  whatsappLink  String
  addressInfo   String
  weekDay       String
  scheduledTime String
  leadership    String[] //Relate to users in a distant future (leaders need to have an account)
}

model Devotional {
  id                   String            @id @default(uuid())
  createdAt            DateTime          @default(now())
  scheduledTo          DateTime          @default(now())
  title                String
  body                 String
  slug                 String            @unique //auto-generated by backend
  author               String
  coverImage           String
  coverThumbnail       String
  assetId              String
  readingTimeInMinutes Int               @default(0)
  DevotionalLikes      DevotionalLikes[]
  DevotionalViews      DevotionalViews[]
}

model DevotionalLikes {
  devotional   Devotional @relation(fields: [devotionalId], references: [id], onDelete: Cascade)
  devotionalId String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@id([userId, devotionalId])
}

model DevotionalViews {
  devotional   Devotional @relation(fields: [devotionalId], references: [id], onDelete: Cascade)
  devotionalId String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@id([userId, devotionalId])
}

model News {
  id             String      @id @default(uuid())
  scheduledTo    DateTime    @default(now())
  createdAt      DateTime    @default(now())
  title          String
  body           String
  slug           String      @unique
  coverImage     String
  coverThumbnail String
  assetId        String
  highlightText  String
  NewsLikes      NewsLikes[]
  NewsViews      NewsViews[]
}

model NewsLikes {
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([userId, newsId])
}

model NewsViews {
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  newsId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([userId, newsId])
}

model Events {
  id                       String                @id @default(uuid())
  title                    String
  description              String
  coverImage               String
  coverThumbnail           String
  assetId                  String
  maxSlots                 Int
  subscriptionsScheduledTo DateTime              @default(now())
  subscriptionsDueDate     DateTime
  eventDate                DateTime
  createdAt                DateTime              @default(now())
  EventsSubscriptions      EventsSubscriptions[]
}

model EventsSubscriptions {
  id        String   @id @default(uuid())
  Event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  userName  String
  userEmail String
  userPhone String
  createdAt DateTime @default(now())
}
